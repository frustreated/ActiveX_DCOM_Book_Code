// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "intcircuitctl.h"

/////////////////////////////////////////////////////////////////////////////
// CIntCircuitCtl

IMPLEMENT_DYNCREATE(CIntCircuitCtl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CIntCircuitCtl properties

/////////////////////////////////////////////////////////////////////////////
// CIntCircuitCtl operations

void CIntCircuitCtl::SetBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CIntCircuitCtl::GetBackColor()
{
	unsigned long result;
	InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CIntCircuitCtl::GetIsStockOK()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

short CIntCircuitCtl::Count(LPCTSTR bstrName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bstrName);
	return result;
}

short CIntCircuitCtl::GetCountByIndex(short sIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		sIndex);
	return result;
}

void CIntCircuitCtl::SetCountByIndex(short sIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 sIndex, nNewValue);
}
